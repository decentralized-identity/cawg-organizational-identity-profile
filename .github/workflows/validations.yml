name: Validate Schemas and Examples

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to compare changes
        
    - name: Get changed files and determine validation needs
      id: analysis
      run: |
        # Determine the base commit for comparison
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          if [ "$BASE_SHA" = "0000000000000000000000000000000000000000" ]; then
            BASE_SHA="4b825dc642cb6eb9a060e54bf8d69288fbee4904"
          fi
        fi
        
        echo "Comparing against: $BASE_SHA"
        
        # Get all changed files and filter out archived
        # git diff --name-only --diff-filter=AMR "$BASE_SHA" HEAD | \
        # grep -v 'specs-core/archived/' > /tmp/all_changed_files.txt || true
        
        # Toggle: set to "true" to validate all files, "false" for changed files only
        VALIDATE_ALL_FILES="false"

        if [ "$VALIDATE_ALL_FILES" = "true" ]; then
        # Get all files and filter out .vscode
        find . -type f \( -name "*.json" -o -name "*.jsonld" -o -name "*.cddl" -o -name "*.cbor" -o -name "*.cbordiag" \) \
            -not -path "*/.vscode/*" \
            -not -path "./.git/*" \
            -not -path "./node_modules/*" > /tmp/all_changed_files.txt || true
        else
        # Get all changed files and filter out .vscode
            git diff --name-only --diff-filter=AMR "$BASE_SHA" HEAD | \
            grep -v '\.vscode/' > /tmp/all_changed_files.txt || true
        fi

        # Categorize changed files
        grep '\.json$' /tmp/all_changed_files.txt > /tmp/json_files.txt || true
        grep '\.jsonld$' /tmp/all_changed_files.txt > /tmp/jsonld_files.txt || true
        grep '\.cddl$' /tmp/all_changed_files.txt > /tmp/cddl_files.txt || true
        grep -E '\.(cbor|cbordiag)$' /tmp/all_changed_files.txt > /tmp/cbor_files.txt || true
        
        # Determine what tools we need
        NEED_JSON_TOOLS="false"
        NEED_OPENAPI_TOOLS="false"
        NEED_JSONLD_TOOLS="false"
        NEED_CDDL_TOOLS="false"
        
        # Check if we need JSON Schema validation
        if [ -s /tmp/json_files.txt ]; then
          NEED_JSON_TOOLS="true"
          # Check if any are OpenAPI files
          while read file; do
            if [ -f "$file" ] && ([[ "$file" =~ \.openapi\.json$ ]] || grep -q '"openapi".*"3\.' "$file" 2>/dev/null); then
              NEED_OPENAPI_TOOLS="true"
              break
            fi
          done < /tmp/json_files.txt
        fi
        
        # Check if we need JSON-LD tools
        if [ -s /tmp/jsonld_files.txt ]; then
          NEED_JSONLD_TOOLS="true"
        fi
        
        # Check if we need CDDL tools
        if [ -s /tmp/cddl_files.txt ] || [ -s /tmp/cbor_files.txt ]; then
          NEED_CDDL_TOOLS="true"
        fi
        
        # Output results
        echo "need_json_tools=$NEED_JSON_TOOLS" >> $GITHUB_OUTPUT
        echo "need_openapi_tools=$NEED_OPENAPI_TOOLS" >> $GITHUB_OUTPUT
        echo "need_jsonld_tools=$NEED_JSONLD_TOOLS" >> $GITHUB_OUTPUT
        echo "need_cddl_tools=$NEED_CDDL_TOOLS" >> $GITHUB_OUTPUT
        
        # Show what we found
        echo "üìã Analysis Results:"
        echo "JSON files changed: $(wc -l < /tmp/json_files.txt)"
        echo "JSON-LD files changed: $(wc -l < /tmp/jsonld_files.txt)"
        echo "CDDL files changed: $(wc -l < /tmp/cddl_files.txt)"
        echo "CBOR files changed: $(wc -l < /tmp/cbor_files.txt)"
        echo ""
        echo "Tools needed:"
        echo "- JSON Schema: $NEED_JSON_TOOLS"
        echo "- OpenAPI: $NEED_OPENAPI_TOOLS"
        echo "- JSON-LD: $NEED_JSONLD_TOOLS"
        echo "- CDDL: $NEED_CDDL_TOOLS"
        
    - name: Setup Node.js
      if: steps.analysis.outputs.need_json_tools == 'true' || steps.analysis.outputs.need_openapi_tools == 'true' || steps.analysis.outputs.need_jsonld_tools == 'true' || steps.analysis.outputs.need_cddl_tools == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Rust
      if: steps.analysis.outputs.need_cddl_tools == 'true'
      uses: dtolnay/rust-toolchain@stable
        
    - name: Install JSON Schema tools
      if: steps.analysis.outputs.need_json_tools == 'true'
      uses: sourcemeta/jsonschema@main
      
    - name: Install OpenAPI tools
      if: steps.analysis.outputs.need_openapi_tools == 'true'
      run: npm install -g @redocly/cli
      
    - name: Install JSON-LD tools
      if: steps.analysis.outputs.need_jsonld_tools == 'true'
      run: |
        npm install -g jsonld-cli
        
    - name: Install CDDL tools
      if: steps.analysis.outputs.need_cddl_tools == 'true'
      run: |
        npm install -g cddl
        cargo install cbor-diag-cli

    - name: Validate JSON files
      if: steps.analysis.outputs.need_json_tools == 'true'
      run: |
        echo "üîç Processing JSON files..."
        exit_code=0
        
        # Track validated pairs to avoid duplicates
        validated_pairs_file="/tmp/validated_pairs.txt"
        > "$validated_pairs_file"  # Clear the file
        
        # Function to normalize paths (remove leading ./)
        normalize_path() {
          echo "$1" | sed 's|^\./||'
        }
        
        while read json_file; do
          if [ ! -f "$json_file" ]; then
            continue
          fi
          
          echo "Processing: $json_file"
          
          # Check if this is a schema file
          if [[ "$json_file" =~ \.schema\.json$ ]]; then
            # 1. Lint schema files only
            echo "  Debug: About to lint schema file"
            echo "  Debug: jsonschema version:"
            jsonschema --version || echo "No version flag available"
            echo "  Debug: Current working directory: $(pwd)"
            echo "  Debug: File exists check: $(ls -la "$json_file")"
            
            if ! jsonschema lint "$json_file"; then
              echo "‚ùå Lint failed: $json_file"
              exit_code=1
              continue
            fi
            echo "‚úÖ Lint passed: $json_file"
            
            # 2. Find and validate instances against this schema
            base_name=$(basename "$json_file" .schema.json)
            echo "  Found schema: $base_name"
            
            # Find ALL matching instances in the entire tree
            instances=$(find . -name "${base_name}-*.json" \
              -not -name "*.schema.json" \
              -not -name "*.openapi.json" \
              -not -path "./specs-core/archived/*" \
              -type f)
            
            if [ -z "$instances" ]; then
              echo "  ‚ö†Ô∏è  No instances found for schema: $json_file"
            else
              while read instance; do
                if [ -n "$instance" ]; then
                  # Normalize paths for consistent comparison
                  norm_schema=$(normalize_path "$json_file")
                  norm_instance=$(normalize_path "$instance")
                  pair_id="$norm_schema::$norm_instance"
                  
                  # Check if we've already validated this pair
                  if ! grep -Fxq "$pair_id" "$validated_pairs_file"; then
                    echo "  Validating $instance against $json_file"
                    if ! jsonschema validate "$json_file" "$instance"; then
                      echo "  ‚ùå Validation failed: $instance"
                      exit_code=1
                    else
                      echo "  ‚úÖ Valid: $instance"
                    fi
                    
                    # Record that we've validated this pair
                    echo "$pair_id" >> "$validated_pairs_file"
                  else
                    echo "  ‚ÑπÔ∏è  Already validated: $instance"
                  fi
                fi
              done <<< "$instances"
            fi
            
          # Check if this is an instance file that needs validation
          elif [[ "$json_file" =~ -.*\.json$ ]] && [[ ! "$json_file" =~ \.openapi\.json$ ]]; then
            # No linting for instances, just validation against schema
            
            # Extract potential schema name by removing the last part after the last hyphen
            file_base=$(basename "$json_file")
            # Remove .json extension first
            file_base_no_ext="${file_base%.json}"
            
            # Find the last hyphen and remove everything after it
            if [[ "$file_base_no_ext" =~ ^(.+)-[^-]+$ ]]; then
              schema_base="${BASH_REMATCH[1]}"
              schema_name="${schema_base}.schema.json"
              echo "  Looking for schema: $schema_name"
              
              # Find the schema anywhere in the tree
              schema_file=$(find . -name "$schema_name" \
                -not -path "./specs-core/archived/*" \
                -type f | head -1)
              
              echo "  Debug: find command result: '$schema_file'"

              if [ -n "$schema_file" ] && [ -f "$schema_file" ]; then
                echo "  Found schema: $schema_file"
                
                # Normalize paths for consistent comparison
                norm_schema=$(normalize_path "$schema_file")
                norm_instance=$(normalize_path "$json_file")
                pair_id="$norm_schema::$norm_instance"
                
                echo "  Debug: Checking if already validated: $pair_id"
                
                # Check if we've already validated this pair
                if ! grep -Fxq "$pair_id" "$validated_pairs_file"; then
                  echo "  Validating $json_file against $schema_file"
                  if ! jsonschema validate "$schema_file" "$json_file"; then
                    echo "  ‚ùå Validation failed: $json_file"
                    exit_code=1
                  else
                    echo "  ‚úÖ Valid: $json_file"
                  fi
                  
                  # Record that we've validated this pair
                  echo "$pair_id" >> "$validated_pairs_file"
                else
                  echo "  ‚ÑπÔ∏è  Already validated: $json_file"
                fi
              else
                echo "  ‚ö†Ô∏è  No schema found for: $json_file"
                echo "  Debug: Searched for file: $schema_name"
                echo "  Debug: Find result was empty or file doesn't exist"
              fi
            else
              echo "  ‚ö†Ô∏è  Cannot extract schema name from: $json_file"
              echo "  Debug: Regex didn't match pattern"
            fi
            
          # Handle other JSON files (non-schema, non-instance patterns)
          else
            # Only lint JSON files that are not OpenAPI files
            if [[ ! "$json_file" =~ \.openapi\.json$ ]]; then
              if ! jsonschema lint "$json_file"; then
                echo "‚ùå Lint failed: $json_file"
                exit_code=1
              else
                echo "‚úÖ Lint passed: $json_file"
              fi
            else
              echo "  ‚ÑπÔ∏è  Skipping OpenAPI file (handled separately): $json_file"
            fi
          fi
          
        done < /tmp/json_files.txt
        
        if [ $exit_code -ne 0 ]; then
          #exit 1
          exit 0 # For testing purposes, we don't want to fail the workflow
        fi

    - name: Validate OpenAPI files
      if: steps.analysis.outputs.need_openapi_tools == 'true'
      run: |
        echo "üîç Validating OpenAPI files..."
        exit_code=0
        
        while read json_file; do
          if [ -f "$json_file" ]; then
            if [[ "$json_file" =~ \.openapi\.json$ ]] || grep -q '"openapi".*"3\.' "$json_file" 2>/dev/null; then
              echo "Validating OpenAPI: $json_file"
              if ! redocly lint "$json_file"; then
                echo "‚ùå OpenAPI validation failed: $json_file"
                exit_code=1
              else
                echo "‚úÖ Valid OpenAPI: $json_file"
              fi
            fi
          fi
        done < /tmp/json_files.txt
        
        if [ $exit_code -ne 0 ]; then
          exit 1
        fi
        
    - name: Validate JSON-LD files
      if: steps.analysis.outputs.need_jsonld_tools == 'true'
      run: |
        echo "üîç Validating JSON-LD files..."
        exit_code=0
        
        while read jsonld_file; do
          if [ -f "$jsonld_file" ]; then
            echo "Validating JSON-LD: $jsonld_file"
            
            # Step 1: Basic JSON syntax check
            if ! jq empty "$jsonld_file" 2>/dev/null; then
              echo "‚ùå Invalid JSON syntax: $jsonld_file"
              exit_code=1
              continue
            fi
            
            # Step 2: JSON-LD expansion test (validates JSON-LD structure)
            if ! jsonld expand "$jsonld_file" > /dev/null 2>&1; then
              echo "‚ùå JSON-LD expansion failed: $jsonld_file"
              exit_code=1
              continue
            fi
            
            # Step 3: Check for required JSON-LD elements
            if ! jq -e 'has("@context")' "$jsonld_file" > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  Warning: JSON-LD file missing @context: $jsonld_file"
            fi
            
            echo "‚úÖ Valid JSON-LD: $jsonld_file"
          fi
        done < /tmp/jsonld_files.txt
        
        if [ $exit_code -ne 0 ]; then
          exit 1
        fi
        
    - name: Validate CDDL files
      if: steps.analysis.outputs.need_cddl_tools == 'true'
      run: |
        echo "üîç Validating CDDL files..."
        exit_code=0
        
        # Check CDDL syntax
        if [ -s /tmp/cddl_files.txt ]; then
          while read cddl_file; do
            if [ -f "$cddl_file" ]; then
              echo "Checking CDDL syntax: $cddl_file"
              if ! npx cddl validate "$cddl_file"; then
                echo "‚ùå CDDL validation failed: $cddl_file"
                exit_code=1
              else
                echo "‚úÖ Valid CDDL syntax: $cddl_file"
              fi
            fi
          done < /tmp/cddl_files.txt
        fi
        
        # Validate CBOR files if any CDDL or CBOR files changed
        if [ -s /tmp/cddl_files.txt ] || [ -s /tmp/cbor_files.txt ]; then
          echo "Running CBOR validation..."
          
          for cddl_dir in $(find . -name "*.cddl" -not -path "./specs-core/archived/*" | xargs dirname | sort -u); do
            cd "$cddl_dir"
            
            # Create common.cddl if common CDDL files exist
            common_files=()
            for common_file in hashed-ext-uri.cddl hashed-uri.cddl assertion-metadata-common.cddl max-tstr-length.cddl; do
              if [ -f "$common_file" ]; then
                common_files+=("$common_file")
              fi
            done
            
            if [ ${#common_files[@]} -gt 0 ]; then
              echo "Creating common.cddl in $cddl_dir"
              for f in "${common_files[@]}"; do
                cat "$f"
                echo ""
              done > common.cddl
            fi
            
            # Generate CBOR from .cbordiag files if they exist
            for cbordiag_file in $(find . -name "*.cbordiag" 2>/dev/null || true); do
              if [ -f "$cbordiag_file" ]; then
                cbor_file="${cbordiag_file%.cbordiag}.cbor"
                echo "Generating $cbor_file from $cbordiag_file"
                cbor-diag-cli convert --input "$cbordiag_file" --output "$cbor_file" || true
              fi
            done
            
            # Validate CBOR examples against their schemas
            for cbor_file in $(find . -name "*.cbor" 2>/dev/null || true); do
              if [ -f "$cbor_file" ]; then
                base_name=$(basename "$cbor_file" .cbor)
                schema_file="${base_name}.cddl"
                
                if [ -f "$schema_file" ]; then
                  echo "Validating $cbor_file against $schema_file"
                  
                  if [ -f "common.cddl" ]; then
                    cat "$schema_file" common.cddl | npx cddl - validate "$cbor_file"
                  else
                    npx cddl "$schema_file" validate "$cbor_file"
                  fi
                  
                  if [ $? -ne 0 ]; then
                    echo "‚ùå CBOR validation failed: $cbor_file"
                    exit_code=1
                  else
                    echo "‚úÖ Valid CBOR: $cbor_file"
                  fi
                fi
              fi
            done
            
            # Clean up
            [ -f "common.cddl" ] && rm common.cddl
            cd - > /dev/null
          done
        fi
        
        if [ $exit_code -ne 0 ]; then
          exit 1
        fi
        
    - name: Summary
      if: always()
      run: |
        echo "üéØ Validation Summary:"
        
        if [ -s /tmp/json_files.txt ]; then
          echo "JSON files processed: $(wc -l < /tmp/json_files.txt)"
        fi
        if [ -s /tmp/jsonld_files.txt ]; then
          echo "JSON-LD files processed: $(wc -l < /tmp/jsonld_files.txt)"
        fi
        if [ -s /tmp/cddl_files.txt ]; then
          echo "CDDL files processed: $(wc -l < /tmp/cddl_files.txt)"
        fi
        if [ -s /tmp/cbor_files.txt ]; then
          echo "CBOR files processed: $(wc -l < /tmp/cbor_files.txt)"
        fi
        
        if [ ! -s /tmp/json_files.txt ] && [ ! -s /tmp/jsonld_files.txt ] && [ ! -s /tmp/cddl_files.txt ] && [ ! -s /tmp/cbor_files.txt ]; then
          echo "‚ÑπÔ∏è  No relevant files changed - validation skipped"
        fi
